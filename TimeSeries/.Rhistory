Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1,2),ma=c(1))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,3], Marima5$fitted[2,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,4], Marima5$fitted[3,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,5], Marima5$fitted[4,2:103]) , gpars = list(col = c("black", "red")))
install.packages("dplyer")
install.packages("dplyr")
library(dplyr)
library(shiny)
Model5
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
library(RCurl)
library(seewave)
library(tuneR)
library(dplyr)
install.packages("seewave")
install.packages("tuneR")
install.packages("signal")
install.packages("signal")
install.packages("signal")
install.packages("tuneR")
install.packages("seewave")
library(RCurl)
library(seewave)
library(tuneR)
library(dplyr)
setwd("~/Projects/MAD
library(tuneR)
library(dplyr)
setwd("~/Projects/MAD_Repo/SpeechToText")
setwd("~/Projects/MAD_Repo/SpeechToText")
library(dplyr)
library(tuneR)
filepath <- "./audio/entrevistaSandra.wav"
df <- data_frame(start = seq(0,8,by = 1),
end = c(seq(1,8, by = 1),9)) %>%
mutate(name = paste0("entrevistaSandra_",start,"_",end,".wav"))
for(i in 1:nrow(df)){
readWave(filepath, from = df$start[i], to = df$end[i], units = "minutes") %>%
writeWave(paste0("./audio/",df$name[i]))
}
library(MASS)
install.packages("MASS")
install.packages("MASS")
Marima5$residuals[1,]
fit1<-fitdistr(Marima5$residuals[1,])
fit1<-MASS::fitdistr(Marima5$residuals[1,])
fit1<-MASS::fitdistr(Marima5$residuals[1,], densfun = "Normal")
fit1<-MASS::fitdistr(Marima5$residuals[1,], densfun = "Normal", start = c(0,10))
Marima5$residuals[1,]
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "Normal", start = c(0,10))
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103])
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal", start = c(0,10))
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal", start = [1,1])
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal", start = (1,1))
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal", start = c(1,1))
fit1<-MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal")
fit1$estimate
fit1<-MASS::fitdistr(Marima5$residuals[,,2:103], densfun = "normal")
fit1<-MASS::fitdistr(Marima5$residuals[,2:103], densfun = "normal")
fit1$estimate
fit1 = c(1:4)
for(i in 1:4){
fit1[i]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
library(MASS)
fit1 = list()
for(i in 1:4){
fit1[i]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
for(i in 1:4){
fit1$fit$i<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
fit1$fit$1
fit1$fit$i
for(i in 1:4){
fit1$fit[i]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
for(i in 1:4){
fit1$fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
fit1$fit[1]
fit1$fit[2]
fit1$fit[3]
fit1$fit[4]
fit1
fit1
library(marima)
library(ggplot2)
library(dplyr)
Marima5$Constant
Marima5$ar.estimates
Marima5$Constant - Marima5$ar.estimates[,,2]%*%series[,2]
Marima5$Constant - Marima5$ar.estimates[,,2]%*%series[,1]
Marima5$fitted[,1:5]
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Marima5$residuals[,1:5]
ts.plot(data.frame(inflows[2:5,2], Marima5$fitted[1,2:5]) , gpars = list(col = c("black", "red")))
library(MASS)
fit1 = list()
for(i in 1:4){
fit1[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
fit1
fit1 = list()
for(i in 1:4){
fit1[i]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
fit1 = list()
for(i in 1:4){
fit1[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
fit1
print(fit1[i]$mean)
library(MASS)
fit1 = list()
for(i in 1:4){
fit1[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
print(fit1[i]$mean)
}
for(i in 1:4){
fit1[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
for(i in 1:4){
fit1[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
print(fit1[i]$)
}
library(MASS)
fit1 = list()
for(i in 1:4){
fit1[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
}
fit1[1]
fit1[1]$mena
fit1[1]$mean
fit1[1]$1
fit1[1][1]
fit1[1][2]
fit1[1][1,1]
fit1[1]
typeof(fit1[1])
typeof(fit1[1])
fit1[1]$1
fit1[1]
fit1[1][1]
fit1[1][1][1]
fit1[1][1][1][1]
fit1[1][1][1][1][1]
fit1[1][1][1][1][1][1]
MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal")
MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal")
typeof(MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal"))
typeof(MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal"))[1]
typeof(MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal")[1])
typeof(MASS::fitdistr(Marima5$residuals[1,2:103], densfun = "normal"))
f1 <- MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
f1$estimate
f1$estimate[1]
f1$estimate[2]
f1$loglik
f1$n
f1$estimate[1]+10
f1$estimate[1]+100
rhsnoice =c(1:4)
rhsnoice
rhsnoice =c(0 for i in 1:4)
rhsnoice =c(1:4)
length(rhsnoice)
m = 4
fit = list()
rhsnoice =c(1:m)
rhsnoice =c(1:m,5)
rhsnoice
rhsnoice =matrix(0, m, num_outcomes)
m = 4
num_outcomes = 3
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
rhsnoice
install.packages('transport')
install.packages('transport')
library(transport)
random32b
set.seed(27)
x <- pp(matrix(runif(500),250,2))
y <- pp(matrix(runif(500),250,2))
wasserstein(x,y,p=1)
wasserstein(x,y,p=2)
wasserstein(x,y,p=1)
a<-wasserstein(x,y,p=1)
a
f1$estimate
f1$estimate[1]
Marima5$Constant
Marima5$Constant[1]
Marima5$Constant[1,1]
Marima5$Constant[1,2]
fit[1
fit[1]
fit[1]
fit[[1]]
for(i in 1:length(rhsnoice)){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
Marima5$Constant[1] + fit[[i]]
}
rhsnoice[i,0] = Marima5$Constant[1] + fit[[i]]$estimate[1]
for(i in 1:length(rhsnoice)){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,0] = Marima5$Constant[1] + fit[[i]]$estimate[1]
}
for(i in 1:length(rhsnoice)){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,0] = Marima5$Constant[1] + fit[[i]]$estimate[1]
}
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,0] = Marima5$Constant[i] + fit[[i]]$estimate[1]
}
rhsnoice
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,0] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
}
rhsnoice
Marima5$Constant[i]
i
fit[[i]]$estimate[1]
Marima5$Constant[i] + fit[[i]]$estimate[1]
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,1] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
}
rhsnoice
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,1] <- Marima5$Constant[i] + fit[[i]]$estimate[1] - fit[[i]]$estimate[2]
rhsnoice[i,2] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
rhsnoice[i,3] <- Marima5$Constant[i] + fit[[i]]$estimate[1] + fit[[i]]$estimate[2]
}
rhsnoice
mm  = Marima5$ar.estimates[,,2]
,,
mm
v1 = mm%*%v0 + rhsnoice[,0]
v0 = c(0,0,0)
v1 = mm%*%v0 + rhsnoice[,0]
v0 = t(c(0,0,0))
v1 = mm%*%v0 + rhsnoice[,0]
mm
v0 = t(c(0,0,0,0))
v1 = mm%*%v0 + rhsnoice[,0]
v0 = c(0,0,0,0)
v1 = mm%*%v0 + rhsnoice[,0]
mm%*%v0
rhsnoice[,0]
rhsnoice[,0]
(mm%*%v0) + rhsnoice[,0]
matrix(rhsnoice[,0]4,1)
matrix(rhsnoice[,0],4,1)
rhsnoice[,0]
m = 4
num_outcomes = 3
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,1] <- Marima5$Constant[i] + fit[[i]]$estimate[1] - fit[[i]]$estimate[2]
rhsnoice[i,2] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
rhsnoice[i,3] <- Marima5$Constant[i] + fit[[i]]$estimate[1] + fit[[i]]$estimate[2]
}
rhsnoice
rhsnoice[,0]
matrix(rhsnoice[,1],4,1)
v1 = (mm%*%v0) + matrix(rhsnoice[,1],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1
v0 = c(0,0,0,0)
v1 = (mm%*%v0) + matrix(rhsnoice[,1],4,1)
v1
v1 = (mm%*%v0) + matrix(rhsnoice[,2],4,1)
v1
v1 = (mm%*%v0) + matrix(rhsnoice[,3],4,1)
v1
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1 = (mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
rhsnoice
mm%*%rhsnoice
v1
mm%*%v1
v0 = c(0,0,0,0)
v1 = -(mm%*%v0) + matrix(rhsnoice[,3],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1 = -(mm%*%v1) + matrix(rhsnoice[,1],4,1)
v1
v1 = -(mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1
v1
v1
v1
mm%*%v1
mm%*%v1
mm%*%v1
mm%*%v1
mm%*%v1
-(mm%*%v1) + matrix(rhsnoice[,3],4,1)
-(mm%*%v1) + matrix(rhsnoice[,3],4,1)
-(mm%*%v1) + matrix(rhsnoice[,3],4,1)
-(mm%*%v1) + matrix(rhsnoice[,3],4,1)
v1
-(mm%*%v1) + matrix(rhsnoice[,2],4,1)
-(mm%*%v1) + matrix(rhsnoice[,2],4,1)
-(mm%*%v1) + matrix(rhsnoice[,2],4,1)
-(mm%*%v1) + matrix(rhsnoice[,2],4,1)
-(mm%*%v1) + matrix(rhsnoice[,2],4,1)
-(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1
rhsnoice
Marima5$Constant
fit[[i]]$estimate[1] - fit[[i]]$estimate[2]
fit[[i]]$estimate[1]
fit[[i]]$estimate[1] + fit[[i]]$estimate[2]
v0 = c(10,0,0,0)
-(mm%*%v0)
matrix(rhsnoice[,3],4,1)
-(mm%*%v0) + matrix(rhsnoice[,3],4,1)
v1 = -(mm%*%v0) + matrix(rhsnoice[,3],4,1)
v1
v1
v1
v1
v1 = -(mm%*%v1) + matrix(rhsnoice[,2],4,1)
v1
rhsnoice
mm
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
Model5
Model5 <- define.model(kvar=4,ar=c(1),ma=1)
Model5
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1),ma=1)
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
Model5
data_library(readr)
inflows <- read.csv(file="~/Dropbox/WORKSPACE/SDDP/TimeSeries/inflows4.txt", header=TRUE, sep="\t")
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
inflows
inflows <- read.csv(file="~/Dropbox/WORKSPACE/SDDP/TimeSeries/inflows4.txt", header=TRUE, sep="\t")
series<-t(inflows[,2:5])
inflows
series<-t(inflows)
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(series[1,2:100], Marima5$fitted[1,2:100]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
Marima5$ar.estimates
Marima5$Constant
m = 4
num_outcomes = 3
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:103], densfun = "normal")
rhsnoice[i,1] <- Marima5$Constant[i] + fit[[i]]$estimate[1] - fit[[i]]$estimate[2]
rhsnoice[i,2] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
rhsnoice[i,3] <- Marima5$Constant[i] + fit[[i]]$estimate[1] + fit[[i]]$estimate[2]
}
rhsnoice
mm  = Marima5$ar.estimates[,,2]
mm
rhsnoice
fit
rhsnoice
mm
Marima5$fitted
rhsnoice
Model5 <- define.model(kvar=4,ar=c(1,2,3),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1,2,3,4,20),ma=0)
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1,2,3,4),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
v0 = series[,1]
v1 = -(mm%*%v0) + matrix(rhsnoice[,3],4,1)
v1
v0
v1
v1 = -(mm%*%v1) + Marima5$Constant
v1
Marima5$fitted[,2]
Marima5$fitted[,3]
Marima5$fitted[,1:4]
-(mm%*%v0) + Marima5$Constant
-(mm%*%v1) + Marima5$Constant
mm
mm  = -Marima5$ar.estimates[,,2]
mm  = -Marima5$ar.estimates[,,2]
mm
v1 = (mm%*%v0) + matrix(rhsnoice[,3],4,1)
v1 = (mm%*%v1) + Marima5$Constant
v1 = (mm%*%v1) + matrix(rhsnoice[,2],4,1)
write.csv(mm,file = "./AR1Matrix.csv")
getwd()
setwd("~/Dropbox/WORKSPACE/SDDP/TimeSeries")
write.csv(mm,file = "./AR1Matrix.csv")
mm''
mm  = -Marima5$ar.estimates[,,2]
mm
v0 = series[,1]
v0 = series[,1]
v1 = (mm%*%v0) + Marima5$Constant
v1
Marima5$fitted
Marima5$fitted[,1:4]
v1
rhsnoice
