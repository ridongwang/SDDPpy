series
Model5 <- define.model(kvar=4,ar=1)
Marima5 <- marima(series,Model5$ar.pattern,Model5$ma.pattern,penalty=1)
# Define marima model
Model5 <- define.model(kvar=4,ar=1,ma=1,rem.var=1)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern,Model5$ma.pattern,penalty=1)
Model5
Model5 <- define.model(kvar=3,ar=1,ma=1,rem.var=1)
Model5
Model5 <- define.model(kvar=4,ar=1,ma=0,rem.var=0)
Model5
Model5
Marima5 <- marima(series,Model5$ar.pattern)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern, drop=TRUE)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern, means =4)
series<-(inflows)
# Define marima model
Model5 <- define.model(kvar=4,ar=1,ma=0,rem.var=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
series<-t(inflows)
# Define marima model
Model5 <- define.model(kvar=4,ar=1,ma=0,rem.var=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
Resid <- arma.filter(series, Marima5$ar.estimates,
Marima5$ma.estimates)
marima(series,Model5$ar.pattern)
Model5 <- define.model(kvar=4,ar=1,ma=0,rem.var=0)
Model5
c(1, 2, 4)
Model5 <- define.model(kvar=4,ar=2)
Model5
# Define marima model
Model5 <- define.model(kvar=4,ar=-1)
Model5 <- define.model(kvar=4,ar=0)
Model5
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Estimate marima model
Marima5 <- marima(series[,1:10],Model5$ar.pattern)
Marima5 <- marima(series[,1:10],Model5$ar.pattern)
series[,1:10]
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
series[,1:100]
# Estimate marima model
Marima5 <- marima(series[,1:100],c(1, 2, 4))
# Estimate marima model
Marima5 <- marima(series[,1:100],c(1, 2))
# Estimate marima model
Marima5 <- marima(series[1,1:100],c(1, 2))
series[1,1:100]
# Estimate marima model
Marima5 <- marima(series[2,1:100],c(1, 2))
Marima5 <- marima(series[2,1:100],c(1, 2))
series[2,1:100]
series[1:2,1:100]
# Estimate marima model
Marima5 <- marima(series[2:3,1:100],c(1, 2))
# Estimate marima model
Marima5 <- marima(series[2:3,1:100])
Marima5 <- marima(series[,1:100])
Resid <- arma.filter(series, Marima5$ar.estimates,
Marima5$ma.estimates)
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
inflows
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=0)
# Estimate marima model
Marima5 <- marima(series[,1:100])
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates,
Marima5$ma.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=0)
# Estimate marima model
Marima5 <- marima(series[,1:100])
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates,
Marima5$ma.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=0)
Model5
# Define marima model
Model5 <- define.model(kvar=4,ar=1,ma=NULL)
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1,2))
Model5
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
Resid <- arma.filter(series, Marima5$ar.estimates,
Marima5$ma.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(Marima5$residuals[1, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1,2))
# Estimate marima model
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates,
Marima5$ma.estimates)
# Compare residuals
plot(Marima5$residuals[1, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
series
Model5 <- define.model(kvar=4,ar=c(1,2))
# Estimate marima model
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
Marima5$ar.estimates
Marima5$ma.estimates
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1,2))
# Estimate marima model
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
Model5 <- define.model(kvar=7,ar=1,ma=1,rem.var=1,reg.var=6:7)
Model5$ar.pattern
Model5 <- define.model(kvar=7,ar=1,ma=1)
Model5$ar.pattern
Marima5$residuals
Model5$ma.pattern
Model5 <- define.model(kvar=4,ar=c(1,2),ma=0)
Model5$ma.pattern
Model5$ar.pattern
Model5 <- define.model(kvar=4,ar=c(1,2),ma=0)
# Estimate marima model
Marima5 <- marima(series[,1:100],Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
Marima5$ar.estimates
Marima5$ma.estimates
Resid
mean(Resid[,])
mean(Resid[1,])
mean(Resid[1:3,])
mean(Resid$residuals)
mean(Resid$residuals[1:4,])
mean(Resid$residuals[,:])
mean(Resid$residuals[,])
mean(Resid$residuals[,1:10])
mean(Resid$residuals)
mean(Resid$residuals[1])
mean(Resid$residuals[2])
mean(Resid$residuals[5])
mean(Resid$residuals[7])
mean(Resid$residuals[109])
mean(Resid$residuals[1011])
Resid$residuals
Resid$residuals.mean
mean(Resid$residuals)
mean(Resid$residuals,dim=1)
mean(Resid$residuals,dim=2)
mean(Resid$residuals,dim=(4,100))
mean(Resid$residuals, na.rm = True)
mean(Resid$residuals, na.rm = True)
mean(Resid$residuals, na.rm = TRUE)
mean(Resid$residuals[2,], na.rm = TRUE)
mean(Resid$residuals[1:4,], na.rm = TRUE)
mean(Resid$residuals[1:5,], na.rm = TRUE)
for k in 1:4{mean(Resid$residuals[1:5,], na.rm = TRUE)
for k in 1:4{mean(Resid$residuals[k,])}
for (k in 1:4) { mean(Resid$residuals[k,]) }
for (k in 1:4) {print( mean(Resid$residuals[k,]) )}
rowMeans(Resid$residuals)
Resid$estimates[,1]
Model5$ar.pattern
Model5$ar.pattern[,,1]
Model5$ar.pattern[,,2]*series[,1]
Model5$ar.pattern[,,2]*series[,1] + Model5$ar.pattern[,,3]*series[,2]
series[,1]
t(series[,1])
Model5$ar.pattern[,,2]*series[,1]
Model5$ar.pattern[,,2]*series[,1]
Resid
series[,2]
series[,1]
Model5$ar.pattern[,,2]**series[,1]
Model5$ar.pattern[,,2]*series[,1]
Model5$ar.pattern[,,2]%*%series[,1]
Marima5$ar.estimates[,,2]%*%series[,1]
Marima5$ar.estimates[,,2]%*%series[,1] + Marima5$ar.estimates[,,3]%*%series[,2]
Resid$estimates[,1]
Resid$estimates[,2]
Resid$residuals[,2]
Resid$residuals[,1]
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
Resid$estimates
View(series)
View(series)
series
series<-t(inflows[,2:5])
# Define marima model
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
Resid$estimates
Marima5
Marima5
Marima5$ar.estimates%*%series[,1]
Marima5$ar.estimates%*%series[,2]
series[,2]
Marima5$ar.estimates
Marima5$ar.estimates[,,2]
Marima5$ar.estimates[,,2]*series[,2]
Marima5$ar.estimates[,,2]%*%series[,2]
Marima5$ar.estimates[,,2]%*%series[,2]+series[,1]
series[,1]
Marima5$Constant
Marima5$residuals
Marima5$fitted
Marima5$fitted[,2]
Marima5$ar.estimates[,,2]%*%series[,1]+Marima5$Constant
Marima5$ar.estimates[,,2]%*%series[,2]+Marima5$Constant
Marima5$ar.estimates[,,2]%*%series[,2]
Marima5$ar.estimates[,,2]%*%series[,2]+series[,1]
Marima5$ar.estimates[,,1]%*%series[,2]+series[,1]
Marima5$ar.estimates[,,2]%*%series[,3]+series[,1]
Marima5$ar.estimates[,,2]%*%series[,3]
Marima5$ar.estimates[,,2]%*%series[,4]
Marima5$ar.estimates[,,2]%*%series[,4]+Marima5$Constant
Marima5$fitted[,1:10]
series[,1:10]
Marima5$residuals[,1:10]
Marima5$Constant
Marima5$ar.estimates[,,2]%*%series[,1]+ Marima5$Constant
Marima5$ma.estimates
Marima5$ar.estimates[,,2]%*%series[,1]+ Marima5$Constant + series[,2]-series[,1]
arma.forecast(series[,1], Marima5)
arma.forecast(series[,2], Marima5)
arma.forecast(series[,1:2], Marima5)
arma.forecast(series, Marima5)
arma.forecast(series, Marima5)
-Marima5$ar.estimates[,,2]%*%series[,1]+ Marima5$Constant
Marima5$fitted[,1:10]
Marima5$Constant
rowMeans(series)
rowMeans(Marima5$residuals)
rowMeans(Marima5$residuals[,2:])
rowMeans(Marima5$residuals[,2:103])
stv(series)
std(series)
apply(series,1, sd, na.rm = TRUE)
apply(series,1, mean, na.rm = TRUE)
apply(Marima5$residuals,1, mean, na.rm = TRUE)
apply(Marima5$residuals,1, sd, na.rm = TRUE)
plot(Marima5$residuals[2, 5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[1,5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
Resid$residuals[2, 5:90]
Marima5$residuals[2, 5:90]
# Compare residuals
plot(series[2,5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[2,5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[2,5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[5,5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[3,5:90], Resid$residuals[2, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[3,5:90], Resid$residuals[3, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[3,5:90], Resid$residuals[3, 5:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[3,1:90], Resid$residuals[3, 1:90],
xlab='marima residuals', ylab='arma.filter residuals')
plot(series[3,1:100], Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
plot(c(1:100), series,
xlab='time', ylab='series')
ts.plot(series, gpars = list(col = c("black", "red")))
ts.plot(inflows[,2:5], gpars = list(col = c("black", "red")))
ts.plot(inflows[1,2:5], gpars = list(col = c("black", "red")))
ts.plot(inflows[,2], gpars = list(col = c("black", "red")))
ts.plot(inflows[,2],t(Marima5$fitted[2,]), gpars = list(col = c("black", "red")))
Marima5$fitted[2,]
t(Marima5$fitted[2,])
inflows[,2]
ts.plot(inflows[,2],t(Marima5$fitted[2,]), gpars = list(col = c("black", "red")))
ts.plot(inflows[,2], gpars = list(col = c("black", "red")))
ts.plot(inflows[,1], gpars = list(col = c("black", "red")))
ts.plot(inflows[,1], gpars = list(col = c("black", "red")))
ts.plot(inflows[,2], gpars = list(col = c("black", "red")))
ts.plot(inflows[,4], gpars = list(col = c("black", "red")))
ts.plot(Marima5$fitted[,] , gpars = list(col = c("black", "red")))
Marima5$fitted[,]
ts.plot(t(Marima5$fitted[,]) , gpars = list(col = c("black", "red")))
ts.plot(t(Marima5$fitted[1,]) , gpars = list(col = c("black", "red")))
ts.plot(t(Marima5$fitted[2,]) , gpars = list(col = c("black", "red")))
ts.plot(t(Marima5$fitted[,]) , gpars = list(col = c("black", "red")))
ts.plot(t(Marima5$fitted[1:1,]) , gpars = list(col = c("black", "red")))
ts.plot(t(Marima5$fitted[1:2,]) , gpars = list(col = c("black", "red")))
Marima5$fitted[3,]
ts.plot(inflows[,4], t(Marima5$fitted[3,]) , gpars = list(col = c("black", "red")))
ts.plot((inflows[,4], t(Marima5$fitted[3,])) , gpars = list(col = c("black", "red")))
Marima5$fitted[3,]
ts.plot(inflows[2:103,4], t(Marima5$fitted[3,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(c(inflows[2:103,4], t(Marima5$fitted[3,2:103])) , gpars = list(col = c("black", "red")))
c(inflows[2:103,4], t(Marima5$fitted[3,2:103]))
mycomp = transform(inflows[2:103,4] , pred4=t(Marima5$fitted[3,2:103]))
mycomp
data.frame(inflows[2:103,4], t(Marima5$fitted[3,2:103]))
ts.plot(c(inflows[2:103,4], t(Marima5$fitted[3,2:103])) , gpars = list(col = c("black", "red")))
data.frame(inflows[2:103,4], t(Marima5$fitted[3,2:103]))
t(Marima5$fitted[3,2:103])
data.frame(inflows[2:103,4], (Marima5$fitted[3,2:103])
data.frame(inflows[2:103,4], (Marima5$fitted[3,2:103]))
data.frame(inflows[2:103,4], Marima5$fitted[3,2:103])
data.frame(inflows[1:103,4], Marima5$fitted[1,2:103])
inflows[1:103,4]
inflows[2:103,1]
data.frame(inflows[2:103,2], Marima5$fitted[1,2:103])
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1,2,3),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1,2,3,4,5,5),ma=c(1,2))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
inflows <- read.csv(file="~/Dropbox/WORKSPACE/SDDP/TimeSeries/inflows4.txt", header=TRUE, sep="\t")
series<-t(inflows[,2:5])
Model5 <- define.model(kvar=4,ar=c(1,2,3,4,5,5),ma=c(1,2))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1,2),ma=c(1,2))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1,2),ma=c(1))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1,2),ma=c(1))
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
# Calculate residuals by filtering
Resid <- arma.filter(series, Marima5$ar.estimates)
# Compare residuals
plot(c(1:100), Resid$residuals[3, 1:100],
xlab='marima residuals', ylab='arma.filter residuals')
ts.plot(data.frame(inflows[2:103,2], Marima5$fitted[1,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,3], Marima5$fitted[2,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,4], Marima5$fitted[3,2:103]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(inflows[2:103,5], Marima5$fitted[4,2:103]) , gpars = list(col = c("black", "red")))
install.packages("dplyer")
install.packages("dplyr")
library(dplyr)
library(shiny)
Model5
Model5 <- define.model(kvar=4,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
library(RCurl)
library(seewave)
library(tuneR)
library(dplyr)
install.packages("seewave")
install.packages("tuneR")
install.packages("signal")
library(marima)
library(ggplot2)
library(dplyr)
data_library(readr)
inflows <- read.csv(file="~/Dropbox/WORKSPACE/SDDP/TimeSeries/inflows50.txt", header=TRUE, sep="\t")
series<-t(inflows)
m = 50
Model5 <- define.model(kvar=m,ar=c(1),ma=0)
Marima5 <- marima(series,Model5$ar.pattern)
Model5 <- define.model(kvar=m,ar=c(1,2),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
m = 50
inflows <- read.csv(file="~/Dropbox/WORKSPACE/SDDP/TimeSeries/inflows50.txt", header=TRUE, sep="\t")
series<-t(inflows)
# Define marima model
Model5 <- define.model(kvar=m,ar=c(1,2),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(series[2,2:100], Marima5$fitted[2,2:100]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(series[2,2:1000], Marima5$fitted[2,2:1000]) , gpars = list(col = c("black", "red")))
Marima5$ar.estimates
ts.plot(data.frame(series[30,2:1000], Marima5$fitted[3,2:1000]) , gpars = list(col = c("black", "red")))
ts.plot(data.frame(series[30,2:1000], Marima5$fitted[30,2:1000]) , gpars = list(col = c("black", "red")))
num_outcomes = 3
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:1000], densfun = "normal")
rhsnoice[i,1] <- Marima5$Constant[i] + fit[[i]]$estimate[1] - fit[[i]]$estimate[2]
rhsnoice[i,2] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
rhsnoice[i,3] <- Marima5$Constant[i] + fit[[i]]$estimate[1] + fit[[i]]$estimate[2]
}
Marima5$residuals[1,2:1000]
Marima5$residuals[30,2:3]
Marima5$residuals[30,1:3]
Model5 <- define.model(kvar=m,ar=c(1),ma=0)
# Estimate marima model
Marima5 <- marima(series,Model5$ar.pattern)
ts.plot(data.frame(series[30,2:1000], Marima5$fitted[30,2:1000]) , gpars = list(col = c("black", "red")))
num_outcomes = 3
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
num_outcomes = 3
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:1000], densfun = "normal")
rhsnoice[i,1] <- Marima5$Constant[i] + fit[[i]]$estimate[1] - fit[[i]]$estimate[2]
rhsnoice[i,2] <- Marima5$Constant[i] + fit[[i]]$estimate[1]
rhsnoice[i,3] <- Marima5$Constant[i] + fit[[i]]$estimate[1] + fit[[i]]$estimate[2]
}
mm  = -Marima5$ar.estimates[,,2]
write.csv(mm,file = "./AR1Matrix50.csv")
setwd("~/Dropbox/WORKSPACE/SDDP/TimeSeries")
mm  = -Marima5$ar.estimates[,,2]
write.csv(mm,file = "./AR1Matrix50.csv")
rhsnoice
step_size = 6.0/num_outcomes
step_size
num_outcomes = 30
fit = list()
rhsnoice =matrix(0, m, num_outcomes)
step_size = 6.0/num_outcomes
step_size
sds = seq(from=-3, to=3, by=step_size)
sds
step_size = 6.0/(num_outcomes-1)
sds = seq(from=-3, to=3, by=step_size)
sds
for(i in 1:m){
fit[[i]]<-MASS::fitdistr(Marima5$residuals[i,2:1000], densfun = "normal")
for( j in 1:num_outcomes){
rhsnoice[i,j] <- Marima5$Constant[i] + fit[[i]]$estimate[1] + sds[j]*fit[[i]]$estimate[2]
}
}
rhsnoice
m
rhsnoice[,1]
rhsnoice[,30]
rhsnoice[,1]<rhsnoice[,2]
rhsnoice[,2]<rhsnoice[,3]
rhsnoice[,10]
setwd("~/Dropbox/WORKSPACE/SDDP/TimeSeries")
write.csv(rhsnoice,file = "./RHSnoice50.csv")
write.csv(rhsnoice,file = "./RHSnoise50.csv")
